package portfolio;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.Timer;

public class BreakOutGame extends JFrame implements KeyListener {
    private final int WIDTH = 800;
    private final int HEIGHT = 600;
    private final int PADDLE_WIDTH = 100;
    private final int PADDLE_HEIGHT = 20;
    private final int BALL_SIZE = 20;
    private final int BRICK_ROWS = 5;
    private final int BRICK_COLUMNS = 10;
    private final int BRICK_WIDTH = 70;
    private final int BRICK_HEIGHT = 30;
    private final int INITIAL_DELAY = 1000;

    private int paddleX = WIDTH / 2 - PADDLE_WIDTH / 2;
    private int ballX = WIDTH / 2 - BALL_SIZE / 2;
    private int ballY = HEIGHT - 100;
    private int ballXSpeed = 3;
    private int ballYSpeed = -3;
    private int score = 0;
    private Timer timer;
    private boolean[] keys;

    private Brick[][] bricks;

    public BreakOutGame() {
        setTitle("Brick Breaker");
        setSize(WIDTH, HEIGHT);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setResizable(false);
        addKeyListener(this);

        keys = new boolean[KeyEvent.KEY_LAST + 1];
        bricks = new Brick[BRICK_ROWS][BRICK_COLUMNS];
        for (int i = 0; i < BRICK_ROWS; i++) {
            for (int j = 0; j < BRICK_COLUMNS; j++) {
                bricks[i][j] = new Brick(j * BRICK_WIDTH + 10, i * BRICK_HEIGHT + 50, BRICK_WIDTH, BRICK_HEIGHT);
            }
        }

        timer = new Timer(INITIAL_DELAY, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                move();
                repaint();
            }
        });
        timer.start();
    }

    public void paint(Graphics g) {
        super.paint(g);
        g.setColor(Color.BLACK);
        g.fillRect(paddleX, HEIGHT - 50, PADDLE_WIDTH, PADDLE_HEIGHT);
        g.setColor(Color.BLUE);
        g.fillOval(ballX, ballY, BALL_SIZE, BALL_SIZE);
        for (int i = 0; i < BRICK_ROWS; i++) {
            for (int j = 0; j < BRICK_COLUMNS; j++) {
                if (bricks[i][j] != null) {
                    g.setColor(bricks[i][j].getColor());
                    g.fillRect(bricks[i][j].getX(), bricks[i][j].getY(), BRICK_WIDTH, BRICK_HEIGHT);
                }
            }
        }
        g.setColor(Color.BLACK);
        g.drawString("Score: " + score, 10, 20);
    }

    private void move() {
        ballX += ballXSpeed;
        ballY += ballYSpeed;

        if (ballX <= 0 || ballX >= WIDTH - BALL_SIZE) {
            ballXSpeed = -ballXSpeed;
        }

        if (ballY <= 0) {
            ballYSpeed = -ballYSpeed;
        } else if (ballY >= HEIGHT - BALL_SIZE - PADDLE_HEIGHT) {
            if (ballX >= paddleX && ballX <= paddleX + PADDLE_WIDTH) {
                ballYSpeed = -ballYSpeed;
                score++;
            } else {
                gameOver();
            }
        }

        for (int i = 0; i < BRICK_ROWS; i++) {
            for (int j = 0; j < BRICK_COLUMNS; j++) {
                if (bricks[i][j] != null && bricks[i][j].intersects(ballX, ballY, BALL_SIZE, BALL_SIZE)) {
                    bricks[i][j] = null;
                    ballYSpeed = -ballYSpeed;
                    score += 10;
                }
            }
        }
    }

    private void gameOver() {
        timer.stop();
        JOptionPane.showMessageDialog(this, "Game Over! Your score: " + score);
        System.exit(0);
    }

    public void keyPressed(KeyEvent e) {
        keys[e.getKeyCode()] = true;

        if (keys[KeyEvent.VK_LEFT]) {
            if (paddleX >= 0)
                paddleX -= 10;
        }

        if (keys[KeyEvent.VK_RIGHT]) {
            if (paddleX <= WIDTH - PADDLE_WIDTH)
                paddleX += 10;
        }
    }

    public void keyReleased(KeyEvent e) {
        keys[e.getKeyCode()] = false;
    }

    public void keyTyped(KeyEvent e) {}

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                new BreakOutGame().setVisible(true);
            }
        });
    }

    class Brick extends Rectangle {
        private Color color;

        public Brick(int x, int y, int width, int height) {
            super(x, y, width, height);
            color = new Color((int) (Math.random() * 0x1000000));
        }

        public Color getColor() {
            return color;
        }
    }
}
